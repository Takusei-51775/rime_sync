# Rime schema
# encoding: utf-8

schema:
  schema_id: ounei_hand
  name: 欧内的手
  version: "1.1"
  author:
    - 丨丨
  description: |
    欧内的手，好汉
  dependencies:
    # - luna_pinyin
    # - chaizi
    - emoji
    # - easy_en

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: simplification
    states: [ 漢字, 汉字 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    # - affix_segmentor@quanpin
    # - affix_segmentor@emojis
    # - affix_segmentor@verbatim ## not as the last of this list
    - affix_segmentor@soft_capslock
    # - affix_segmentor@dbpy_flypy_help
    # - affix_segmentor@easy_en_simp
    # - affix_segmentor@tex_translator
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator@custom_phrase
    # - reverse_lookup_translator
    - script_translator
    # - script_translator@quanpin
    # - table_translator@emojis
    - table_translator@soft_capslock
    # - table_translator@dbpy_flypy_help
    # - lua_translator@tex_translator
    # - lua_translator@func_translator
    # - table_translator@easy_en_simp ## 添加注释后：停用单词输入
  filters:
    - simplifier
    - uniquifier

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcba[;
  initials: zyxwvutsrqponmlkjihgfedcba
  delimiter: " '"
  algebra:
    - derive/^(\w+).+$/$1/
    - derive/^((\w+)[[].).+$/$1/
    - derive/^([jqxy])u/$1v/
    - derive/^([jqxy])v/$1u/
    - derive/^([nl])ve$/$1ue/
    - derive/^([nl])ue$/$1ve/
    - derive/[[]// # 有无[均可引导辅助码
    - abbrev/^([a-z]).+$/$1/   # 超级简拼
    - abbrev/^([zcs]h).+$/$1/  # 超级简拼中，zh ch sh 视为整体（ch'sh → 城市），而不是像这样分开（c'h's'h → 吃好睡好）。

 ### 自动纠错
########## START 这几个有副作用的规则圈起来，方便取舍
    # 这些规则对全拼简拼混输有副作用：如「x'ai 喜爱」被纠错为「xia 下」
    # zh、ch、sh
    - derive/([zcs])h(a|e|i|u|ai|ei|an|en|ou|uo|ua|un|ui|uan|uai|uang|ang|eng|ong)$/h$1$2/  # hzi → zhi
    - derive/([zcs])h([aeiu])$/$1$2h/  # zih → zhi
    # # ia
    # - derive/([qjx])ia$/$1ai/  # qai → qia
    # # an
    # - derive/([wrtypsdfghklzcbnm])an$/$1na/  # dna → dan
    # # en
    # - derive/([wrpsdfghklzcbnm])en$/$1ne/  # rne → ren
    # # in
    # - derive/([qypjlxbnm])in$/$1ni/  # qni → qin
    # # un
    # - derive/([qrtysdghjklzxc])un$/$1nu/  # qnu → qun
    # # ian
    # - derive/([qtpdjlxbnm])ian$/$1ain/
########## END
    # ai
    - derive/^([wghk])ai$/$1ia/  # wia → wai
    # ei
    - derive/([wfghkz])ei$/$1ie/  # wie → wei
    # ie
    - derive/([jqx])ie$/$1ei/  # jei → jie
    # ao
    - derive/([rtypsdghklzcbnm])ao$/$1oa/
    # ou
    - derive/([ypfm])ou$/$1uo/
    # uo（无）
    # ang
    - derive/([wrtypsdfghklzcbnm])ang$/$1nag/
    - derive/([wrtypsdfghklzcbnm])ang$/$1agn/
    # eng
    - derive/([wrtpsdfghklzcbnm])eng$/$1neg/
    - derive/([wrtpsdfghklzcbnm])eng$/$1egn/
    # ing
    - derive/([qtypdjlxbnm])ing$/$1nig/
    - derive/([qtypdjlxbnm])ing$/$1ign/
    # ong
    - derive/([rtysdghklzcn])ong$/$1nog/
    - derive/([rtysdghklzcn])ong$/$1ogn/
    # iao
    - derive/([qtpdjlxbnm])iao$/$1ioa/
    - derive/([qtpdjlxbnm])iao$/$1oia/
    # ui
    - derive/([rtsghkzc])ui$/$1iu/
    # iu
    - derive/([qjlxnm])iu$/$1ui/
    # iang
    - derive/([qjlxn])iang$/$1aing/
    - derive/([qjlxn])iang$/$1inag/
    # ua
    - derive/([g|k|h|zh|sh])ua$/$1au/
    # uai
    - derive/([g|h|k|zh|ch|sh])uai$/$1aui/
    # - derive/([g|h|k|zh|ch|sh])uai$/$1uia/ # 和「会啊、追啊」等常用词有冲突
    # uan
    - derive/([qrtysdghjklzxcn])uan$/$1aun/
    # - derive/([qrtysdghjklzxcn])uan$/$1una/ # 和「去哪、露娜」等常用词有冲突
    # ue
    - derive/([nlyjqx])ue$/$1eu/
    # uang
    - derive/([g|h|k|zh|ch|sh])uang$/$1aung/
    - derive/([g|h|k|zh|ch|sh])uang$/$1uagn/
    - derive/([g|h|k|zh|ch|sh])uang$/$1unag/
    - derive/([g|h|k|zh|ch|sh])uang$/$1augn/
    # iong
    - derive/([jqx])iong$/$1inog/
    - derive/([jqx])iong$/$1oing/
    - derive/([jqx])iong$/$1iogn/
    - derive/([jqx])iong$/$1oign/
    # 其他
    - derive/([rtsdghkzc])o(u|ng)$/$1o/ # do → dou|dong
    - derive/(.+)ong$/$1on/ # lon → long
    - derive/([tl])eng$/$1en/ # ten → teng
    - derive/([qwrtypsdfghjklzxcbnm])([aeio])ng$/$1ng/ # lng → lang、leng、ling、long

translator:
  dictionary: ounei_hand
  spelling_hints: 1 
  comment_format:
    - xform/^[^[]+[[]// ## 单字编码提示只显示辅助码部分


custom_phrase:
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 1

# reverse_lookup:
#   dictionary: chaizi_flypy # stroke
#   enable_completion: true
#   prefix: "ab"
#   suffix: "'"
#   tips: 〔部件组字〕 # 〔筆畫〕
#   preedit_format:
#     # - xlit/hspnz/一丨丿丶乙/

punctuator:
  import_preset: ounei_symbols
  half_shape:
    '"' : { pair: [ '‘', '’' ] } ## 添加注释后：恢复默认引号
    '''' : { pair: [ '“', '”' ] } ## 添加注释后：恢复默认引号
  symbols:
    '/er': [ 二, 貳, ₂, ², Ⅱ, ⅱ, ②, ➁, ❷, ➋, ⓶, ⑵, ⒉, ２, ㊁, ㈡, 弍, 弐, 貮, 㒃, 㒳, 兩, 倆, ㆓]
    '/san': [ 三, 叄, ₃, ³, Ⅲ, ⅲ, ③, ➂, ❸, ➌, ⓷, ⑶, ⒊, ３, ㊂, ㈢, 參, 参, 叁, 弎, 仨, ㆔]
    '/si': [ 四, 肆, ₄, ⁴, Ⅳ, ⅳ, ④, ➃, ❹, ➍, ⓸, ⑷, ⒋, ４, ㊃, ㈣, 亖]
    '/zb': [┌, └, ┐, ┘, ─, │, ├, ┤, ┬, ┴, ┼, ┏, ┗, ┓, ┛, ━, ┃, ┣, ┫, ┳, ┻, ╋] ## 制表符

key_binder:
  import_preset: default
  bindings:
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    # - { when: has_menu, accept: semicolon, send: 2 }
    - { when: has_menu, accept: slash, send: 2 }
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    ## 对以下4行取消注释后：启用光标回退至特定音节后、补充辅助码的功能
    ## （自然码等其他双拼用户请在 pinyin_switch.yaml 中设置）
    #- { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}[' }
    #- { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }

recognizer:
  # import_preset: default
  patterns:
    uppercase: "^[A-Z].*$"
    punct: '^/[015-9A-Za-z]+$' ## use "/er" instead of "/2"
    ## associate schemes: 
    # reverse_lookup: "^ab[a-z]*'?$" # "[[]b[a-z]*'?$"
    # quanpin: "^ap[a-z]*'?$"
    # emojis: "^ae[a-z]*'?$" # "^ae.*$" 
    # verbatim: "^as.*$"
    soft_capslock: "^au.*$"
    # dbpy_flypy_help: "^ac.*$"
    # easy_en_simp: "^aw[a-z]*"
    # tex_translator: "^al(.*)$"
    # func_translator: "^af(.*)$"

menu:
  page_size: 4

# quanpin:
#   tag: quanpin
#   dictionary: luna_pinyin ## 用户可自行改为扩展后的词典
#   prism: luna_pinyin
#   enable_completion: true
#   prefix: "ap"
#   suffix: "'"
#   tips: "全拼"
# emojis:
#   tag: emojis
#   dictionary: emoji
#   enable_completion: true
#   prefix: "ae"
#   suffix: "'"
#   tips: " Emoji"
# verbatim:
#   tag: verbatim ## english; ascii
#   prefix: "as"
#   tips: "cii"
soft_capslock:
  dictionary: ""
  user_dict: uppercase
  tag: soft_capslock
  prefix: "au"
  tips: "临时大写"
  db_class: stabledb
  enable_completion: false
  enable_sentence: true
  initial_quality: 1
# easy_en_simp:
#   tag: easy_en_simp
#   dictionary: easy_en
#   enable_completion: true
#   enable_sentence: false
#   prefix: "aw"
#   # suffix: "'"
#   tips: "英文单词（可去元音）"
#   spelling_hints: 9
#   comment_format:
#     - xform/^.+$//
# tex_translator:
#   tag: tex_translator
#   prefix: "al"
#   tips: " TeX 公式"

